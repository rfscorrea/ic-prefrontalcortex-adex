import numpy as np
import numpy.matlib as mtl
from scipy.special import erfcinv


def ParamSetup(N1, Nstripes, scales):
    NTypes = np.ceil(N1 * np.asarray([47, 1.55, 1.55, 1.3, 1.3, 2.6, 2.1,
                                      38, 0.25, 0.25, 0.25, 0.25, 1.8, 1.8]) / 100)

    NTypesN = len(NTypes)
    N = int(round(np.sum(NTypes), 0))
    if N != N1:
        print(
            'WARNING: Neurons can not be distributed evenly across cell types. Number of generated neurons ({}) differs from specified number ({}).\n'.format(
                N, N1))

    gmax_scale, pCon_scale, param_std_scale = scales

    V0Par = np.zeros((NTypesN, 2, 5))
    V0Par[:, 0, :] = mtl.repmat([-70, 0, 0, 0, 1], NTypesN, 1)
    V0Par[:, 1, :] = mtl.repmat([0, 0, 0, 0, 1], NTypesN, 1)

    CellPar = np.zeros((10, NTypesN))
    CellPar[1, :] = [3.0751, 1.6902, 1.6902, 3.0014, 3.0014, 3.0751, 3.3869,
                     2.2513, 1.6902, 1.6902, 3.0014, 3.0014, 2.2513, 3.3869, ]
    CellPar[2, :] = [1.9661, 1.0353, 1.0353, 1.4581, 1.4581, 1.9661, 1.0106,
                     1.0196, 1.0353, 1.0353, 1.4581, 1.4581, 1.0196, 1.0106, ]
    CellPar[3, :] = [3.5945, 2.9528, 2.9528, 3.0991, 3.0991, 3.5945, 3.8065,
                     3.4415, 2.9528, 2.9528, 3.0991, 3.0991, 3.4415, 3.8065, ]
    CellPar[4, :] = [1.0309, 3.2163, 3.2163, 3.1517, 3.1517, 1.0309, 3.0269,
                     1.5178, 3.2163, 3.2163, 3.1517, 3.1517, 1.5178, 3.0269, ]
    CellPar[5, :] = [3.1428, 2.8230, 2.8230, 2.9335, 2.9335, 3.1428, 2.3911,
                     1.0702, 2.8230, 2.8230, 2.9335, 2.9335, 1.0702, 2.3911, ]
    CellPar[6, :] = [4.4809, 1.0542, 1.0542, 1.0730, 1.0730, 4.4809, 4.1986,
                     4.5650, 1.0542, 1.0542, 1.0730, 1.0730, 4.5650, 4.1986, ]
    CellPar[7, :] = [1.0189, 2.5959, 2.5959, 0.6931, 0.6931, 1.0189, 0.8080,
                     1.1154, 2.5959, 2.5959, 0.6931, 0.6931, 1.1154, 0.8080, ]
    CellPar[8, :] = [5.0719, 4.1321, 4.1321, 1.9059, 1.9059, 5.0719, 3.0051,
                     4.3414, 4.1321, 4.1321, 1.9059, 1.9059, 4.3414, 3.0051, ]
    CellPar[9, :] = [2.9010, 3.6925, 3.6925, 2.9462, 2.9462, 2.9010, 3.0701,
                     3.3302, 3.6925, 3.6925, 2.9462, 2.9462, 3.3302, 3.0701, ]

    ParCov = np.asarray([np.matrix([[1.0000, 0.1580, -0.5835, 0.4011, -0.0561, 0.0718, -0.2038, 0.2615, -0.2365, ],
                                    [0.1580, 1.0000, 0.0141, -0.1272, -0.4327, 0.1778, -0.0902, -0.0329, -0.3778, ],
                                    [-0.5835, 0.0141, 1.0000, -0.6295, -0.2949, -0.2008, 0.3164, -0.2615, -0.0536, ],
                                    [0.4011, -0.1272, -0.6295, 1.0000, 0.6960, -0.2587, -0.0988, 0.6113, 0.5636, ],
                                    [-0.0561, -0.4327, -0.2949, 0.6960, 1.0000, -0.3370, 0.2042, 0.3959, 0.8581, ],
                                    [0.0718, 0.1778, -0.2008, -0.2587, -0.3370, 1.0000, -0.0634, -0.5202, -0.3829, ],
                                    [-0.2038, -0.0902, 0.3164, -0.0988, 0.2042, -0.0634, 1.0000, 0.0559, 0.3322, ],
                                    [0.2615, -0.0329, -0.2615, 0.6113, 0.3959, -0.5202, 0.0559, 1.0000, 0.3210, ],
                                    [-0.2365, -0.3778, -0.0536, 0.5636, 0.8581, -0.3829, 0.3322, 0.3210, 1.0000, ], ]),
                         np.matrix([[1.0000, -0.2894, 0.0381, 0.0664, -0.2418, 0.2253, 0.2822, -0.2919, 0.0581, ],
                                    [-0.2894, 1.0000, -0.2259, 0.4265, 0.1859, -0.6307, -0.0140, 0.4944, 0.2495, ],
                                    [0.0381, -0.2259, 1.0000, -0.2855, 0.0724, 0.1199, -0.1487, -0.3773, 0.1881, ],
                                    [0.0664, 0.4265, -0.2855, 1.0000, 0.2208, -0.3752, 0.0660, 0.3415, 0.7289, ],
                                    [-0.2418, 0.1859, 0.0724, 0.2208, 1.0000, 0.1412, -0.2931, 0.1993, 0.4609, ],
                                    [0.2253, -0.6307, 0.1199, -0.3752, 0.1412, 1.0000, -0.2855, -0.2046, -0.1974, ],
                                    [0.2822, -0.0140, -0.1487, 0.0660, -0.2931, -0.2855, 1.0000, -0.1172, -0.0851, ],
                                    [-0.2919, 0.4944, -0.3773, 0.3415, 0.1993, -0.2046, -0.1172, 1.0000, 0.0530, ],
                                    [0.0581, 0.2495, 0.1881, 0.7289, 0.4609, -0.1974, -0.0851, 0.0530, 1.0000], ]),
                         np.matrix([[1.0000, -0.2894, 0.0381, 0.0664, -0.2418, 0.2253, 0.2822, -0.2919, 0.0581, ],
                                    [-0.2894, 1.0000, -0.2259, 0.4265, 0.1859, -0.6307, -0.0140, 0.4944, 0.2495, ],
                                    [0.0381, -0.2259, 1.0000, -0.2855, 0.0724, 0.1199, -0.1487, -0.3773, 0.1881, ],
                                    [0.0664, 0.4265, -0.2855, 1.0000, 0.2208, -0.3752, 0.0660, 0.3415, 0.7289, ],
                                    [-0.2418, 0.1859, 0.0724, 0.2208, 1.0000, 0.1412, -0.2931, 0.1993, 0.4609, ],
                                    [0.2253, -0.6307, 0.1199, -0.3752, 0.1412, 1.0000, -0.2855, -0.2046, -0.1974, ],
                                    [0.2822, -0.0140, -0.1487, 0.0660, -0.2931, -0.2855, 1.0000, -0.1172, -0.0851, ],
                                    [-0.2919, 0.4944, -0.3773, 0.3415, 0.1993, -0.2046, -0.1172, 1.0000, 0.0530, ],
                                    [0.0581, 0.2495, 0.1881, 0.7289, 0.4609, -0.1974, -0.0851, 0.0530, 1.0000], ]),
                         np.matrix([[1.0000, -0.2394, -0.6001, 0.3114, -0.2367, 0.5856, 0.2077, 0.0171, -0.4079, ],
                                    [-0.2394, 1.0000, -0.1764, 0.4675, 0.1810, -0.4942, -0.4389, 0.6950, 0.0811, ],
                                    [-0.6001, -0.1764, 1.0000, -0.6002, 0.2170, -0.0922, 0.2129, -0.3566, 0.4204, ],
                                    [0.3114, 0.4675, -0.6002, 1.0000, 0.2597, -0.1039, -0.5507, 0.7230, 0.0775, ],
                                    [-0.2367, 0.1810, 0.2170, 0.2597, 1.0000, 0.2159, -0.7123, 0.0193, 0.8494, ],
                                    [0.5856, -0.4942, -0.0922, -0.1039, 0.2159, 1.0000, 0.0587, -0.4724, 0.0957, ],
                                    [0.2077, -0.4389, 0.2129, -0.5507, -0.7123, 0.0587, 1.0000, -0.3395, -0.5780, ],
                                    [0.0171, 0.6950, -0.3566, 0.7230, 0.0193, -0.4724, -0.3395, 1.0000, -0.1084, ],
                                    [-0.4079, 0.0811, 0.4204, 0.0775, 0.8494, 0.0957, -0.5780, -0.1084, 1.0000], ]),
                         np.matrix([[1.0000, -0.2394, -0.6001, 0.3114, -0.2367, 0.5856, 0.2077, 0.0171, -0.4079, ],
                                    [-0.2394, 1.0000, -0.1764, 0.4675, 0.1810, -0.4942, -0.4389, 0.6950, 0.0811, ],
                                    [-0.6001, -0.1764, 1.0000, -0.6002, 0.2170, -0.0922, 0.2129, -0.3566, 0.4204, ],
                                    [0.3114, 0.4675, -0.6002, 1.0000, 0.2597, -0.1039, -0.5507, 0.7230, 0.0775, ],
                                    [-0.2367, 0.1810, 0.2170, 0.2597, 1.0000, 0.2159, -0.7123, 0.0193, 0.8494, ],
                                    [0.5856, -0.4942, -0.0922, -0.1039, 0.2159, 1.0000, 0.0587, -0.4724, 0.0957, ],
                                    [0.2077, -0.4389, 0.2129, -0.5507, -0.7123, 0.0587, 1.0000, -0.3395, -0.5780, ],
                                    [0.0171, 0.6950, -0.3566, 0.7230, 0.0193, -0.4724, -0.3395, 1.0000, -0.1084, ],
                                    [-0.4079, 0.0811, 0.4204, 0.0775, 0.8494, 0.0957, -0.5780, -0.1084, 1.0000], ]),
                         np.matrix([[1.0000, 0.1580, -0.5835, 0.4011, -0.0561, 0.0718, -0.2038, 0.2615, -0.2365, ],
                                    [0.1580, 1.0000, 0.0141, -0.1272, -0.4327, 0.1778, -0.0902, -0.0329, -0.3778, ],
                                    [-0.5835, 0.0141, 1.0000, -0.6295, -0.2949, -0.2008, 0.3164, -0.2615, -0.0536, ],
                                    [0.4011, -0.1272, -0.6295, 1.0000, 0.6960, -0.2587, -0.0988, 0.6113, 0.5636, ],
                                    [-0.0561, -0.4327, -0.2949, 0.6960, 1.0000, -0.3370, 0.2042, 0.3959, 0.8581, ],
                                    [0.0718, 0.1778, -0.2008, -0.2587, -0.3370, 1.0000, -0.0634, -0.5202, -0.3829, ],
                                    [-0.2038, -0.0902, 0.3164, -0.0988, 0.2042, -0.0634, 1.0000, 0.0559, 0.3322, ],
                                    [0.2615, -0.0329, -0.2615, 0.6113, 0.3959, -0.5202, 0.0559, 1.0000, 0.3210, ],
                                    [-0.2365, -0.3778, -0.0536, 0.5636, 0.8581, -0.3829, 0.3322, 0.3210, 1.0000, ], ]),
                         np.matrix([[1.0000, -0.1586, 0.1817, -0.0195, -0.0884, 0.0282, 0.0560, -0.1369, 0.0099, ],
                                    [-0.1586, 1.0000, 0.0440, 0.1013, -0.2510, -0.0046, -0.1105, 0.0738, -0.1152, ],
                                    [0.1817, 0.0440, 1.0000, -0.5118, 0.0414, 0.2570, 0.0932, 0.0961, 0.4938, ],
                                    [-0.0195, 0.1013, -0.5118, 1.0000, 0.0480, -0.1155, -0.2463, -0.0754, 0.0204, ],
                                    [-0.0884, -0.2510, 0.0414, 0.0480, 1.0000, 0.2577, -0.0581, 0.3152, 0.3151, ],
                                    [0.0282, -0.0046, 0.2570, -0.1155, 0.2577, 1.0000, -0.1598, 0.4397, 0.1107, ],
                                    [0.0560, -0.1105, 0.0932, -0.2463, -0.0581, -0.1598, 1.0000, -0.4617, 0.1872, ],
                                    [-0.1369, 0.0738, 0.0961, -0.0754, 0.3152, 0.4397, -0.4617, 1.0000, -0.0114, ],
                                    [0.0099, -0.1152, 0.4938, 0.0204, 0.3151, 0.1107, 0.1872, -0.0114, 1.0000, ], ]),

                         np.matrix([[1.0000, -0.2440, -0.2729, 0.2863, -0.0329, 0.2925, -0.0588, 0.3377, -0.1914, ],
                                    [-0.2440, 1.0000, 0.0874, -0.1523, -0.2565, -0.1605, 0.0874, -0.2895, -0.2125, ],
                                    [-0.2729, 0.0874, 1.0000, -0.6332, 0.2012, -0.0578, 0.0283, -0.1100, 0.3013, ],
                                    [0.2863, -0.1523, -0.6332, 1.0000, 0.3140, 0.2152, -0.1084, 0.4114, 0.1732, ],
                                    [-0.0329, -0.2565, 0.2012, 0.3140, 1.0000, 0.3184, -0.1923, 0.3761, 0.8433, ],
                                    [0.2925, -0.1605, -0.0578, 0.2152, 0.3184, 1.0000, 0.1246, 0.4736, 0.2078, ],
                                    [-0.0588, 0.0874, 0.0283, -0.1084, -0.1923, 0.1246, 1.0000, 0.0752, -0.1578, ],
                                    [0.3377, -0.2895, -0.1100, 0.4114, 0.3761, 0.4736, 0.0752, 1.0000, 0.2114, ],
                                    [-0.1914, -0.2125, 0.3013, 0.1732, 0.8433, 0.2078, -0.1578, 0.2114, 1.0000, ], ]),
                         np.matrix([[1.0000, -0.2894, 0.0381, 0.0664, -0.2418, 0.2253, 0.2822, -0.2919, 0.0581, ],
                                    [-0.2894, 1.0000, -0.2259, 0.4265, 0.1859, -0.6307, -0.0140, 0.4944, 0.2495, ],
                                    [0.0381, -0.2259, 1.0000, -0.2855, 0.0724, 0.1199, -0.1487, -0.3773, 0.1881, ],
                                    [0.0664, 0.4265, -0.2855, 1.0000, 0.2208, -0.3752, 0.0660, 0.3415, 0.7289, ],
                                    [-0.2418, 0.1859, 0.0724, 0.2208, 1.0000, 0.1412, -0.2931, 0.1993, 0.4609, ],
                                    [0.2253, -0.6307, 0.1199, -0.3752, 0.1412, 1.0000, -0.2855, -0.2046, -0.1974, ],
                                    [0.2822, -0.0140, -0.1487, 0.0660, -0.2931, -0.2855, 1.0000, -0.1172, -0.0851, ],
                                    [-0.2919, 0.4944, -0.3773, 0.3415, 0.1993, -0.2046, -0.1172, 1.0000, 0.0530, ],
                                    [0.0581, 0.2495, 0.1881, 0.7289, 0.4609, -0.1974, -0.0851, 0.0530, 1.0000, ], ]),
                         np.matrix([[1.0000, -0.2894, 0.0381, 0.0664, -0.2418, 0.2253, 0.2822, -0.2919, 0.0581, ],
                                    [-0.2894, 1.0000, -0.2259, 0.4265, 0.1859, -0.6307, -0.0140, 0.4944, 0.2495, ],
                                    [0.0381, -0.2259, 1.0000, -0.2855, 0.0724, 0.1199, -0.1487, -0.3773, 0.1881, ],
                                    [0.0664, 0.4265, -0.2855, 1.0000, 0.2208, -0.3752, 0.0660, 0.3415, 0.7289, ],
                                    [-0.2418, 0.1859, 0.0724, 0.2208, 1.0000, 0.1412, -0.2931, 0.1993, 0.4609, ],
                                    [0.2253, -0.6307, 0.1199, -0.3752, 0.1412, 1.0000, -0.2855, -0.2046, -0.1974, ],
                                    [0.2822, -0.0140, -0.1487, 0.0660, -0.2931, -0.2855, 1.0000, -0.1172, -0.0851, ],
                                    [-0.2919, 0.4944, -0.3773, 0.3415, 0.1993, -0.2046, -0.1172, 1.0000, 0.0530, ],
                                    [0.0581, 0.2495, 0.1881, 0.7289, 0.4609, -0.1974, -0.0851, 0.0530, 1.0000, ], ]),
                         np.matrix([[1.0000, -0.2394, -0.6001, 0.3114, -0.2367, 0.5856, 0.2077, 0.0171, -0.4079, ],
                                    [-0.2394, 1.0000, -0.1764, 0.4675, 0.1810, -0.4942, -0.4389, 0.6950, 0.0811, ],
                                    [-0.6001, -0.1764, 1.0000, -0.6002, 0.2170, -0.0922, 0.2129, -0.3566, 0.4204, ],
                                    [0.3114, 0.4675, -0.6002, 1.0000, 0.2597, -0.1039, -0.5507, 0.7230, 0.0775, ],
                                    [-0.2367, 0.1810, 0.2170, 0.2597, 1.0000, 0.2159, -0.7123, 0.0193, 0.8494, ],
                                    [0.5856, -0.4942, -0.0922, -0.1039, 0.2159, 1.0000, 0.0587, -0.4724, 0.0957, ],
                                    [0.2077, -0.4389, 0.2129, -0.5507, -0.7123, 0.0587, 1.0000, -0.3395, -0.5780, ],
                                    [0.0171, 0.6950, -0.3566, 0.7230, 0.0193, -0.4724, -0.3395, 1.0000, -0.1084, ],
                                    [-0.4079, 0.0811, 0.4204, 0.0775, 0.8494, 0.0957, -0.5780, -0.1084, 1.0000, ], ]),
                         np.matrix([[1.0000, -0.2394, -0.6001, 0.3114, -0.2367, 0.5856, 0.2077, 0.0171, -0.4079, ],
                                    [-0.2394, 1.0000, -0.1764, 0.4675, 0.1810, -0.4942, -0.4389, 0.6950, 0.0811, ],
                                    [-0.6001, -0.1764, 1.0000, -0.6002, 0.2170, -0.0922, 0.2129, -0.3566, 0.4204, ],
                                    [0.3114, 0.4675, -0.6002, 1.0000, 0.2597, -0.1039, -0.5507, 0.7230, 0.0775, ],
                                    [-0.2367, 0.1810, 0.2170, 0.2597, 1.0000, 0.2159, -0.7123, 0.0193, 0.8494, ],
                                    [0.5856, -0.4942, -0.0922, -0.1039, 0.2159, 1.0000, 0.0587, -0.4724, 0.0957, ],
                                    [0.2077, -0.4389, 0.2129, -0.5507, -0.7123, 0.0587, 1.0000, -0.3395, -0.5780, ],
                                    [0.0171, 0.6950, -0.3566, 0.7230, 0.0193, -0.4724, -0.3395, 1.0000, -0.1084, ],
                                    [-0.4079, 0.0811, 0.4204, 0.0775, 0.8494, 0.0957, -0.5780, -0.1084, 1.0000, ], ]),
                         np.matrix([[1.0000, -0.2440, -0.2729, 0.2863, -0.0329, 0.2925, -0.0588, 0.3377, -0.1914, ],
                                    [-0.2440, 1.0000, 0.0874, -0.1523, -0.2565, -0.1605, 0.0874, -0.2895, -0.2125, ],
                                    [-0.2729, 0.0874, 1.0000, -0.6332, 0.2012, -0.0578, 0.0283, -0.1100, 0.3013, ],
                                    [0.2863, -0.1523, -0.6332, 1.0000, 0.3140, 0.2152, -0.1084, 0.4114, 0.1732, ],
                                    [-0.0329, -0.2565, 0.2012, 0.3140, 1.0000, 0.3184, -0.1923, 0.3761, 0.8433, ],
                                    [0.2925, -0.1605, -0.0578, 0.2152, 0.3184, 1.0000, 0.1246, 0.4736, 0.2078, ],
                                    [-0.0588, 0.0874, 0.0283, -0.1084, -0.1923, 0.1246, 1.0000, 0.0752, -0.1578, ],
                                    [0.3377, -0.2895, -0.1100, 0.4114, 0.3761, 0.4736, 0.0752, 1.0000, 0.2114, ],
                                    [-0.1914, -0.2125, 0.3013, 0.1732, 0.8433, 0.2078, -0.1578, 0.2114, 1.0000, ], ]),
                         np.matrix([[1.0000, -0.1586, 0.1817, -0.0195, -0.0884, 0.0282, 0.0560, -0.1369, 0.0099, ],
                                    [-0.1586, 1.0000, 0.0440, 0.1013, -0.2510, -0.0046, -0.1105, 0.0738, -0.1152, ],
                                    [0.1817, 0.0440, 1.0000, -0.5118, 0.0414, 0.2570, 0.0932, 0.0961, 0.4938, ],
                                    [-0.0195, 0.1013, -0.5118, 1.0000, 0.0480, -0.1155, -0.2463, -0.0754, 0.0204, ],
                                    [-0.0884, -0.2510, 0.0414, 0.0480, 1.0000, 0.2577, -0.0581, 0.3152, 0.3151, ],
                                    [0.0282, -0.0046, 0.2570, -0.1155, 0.2577, 1.0000, -0.1598, 0.4397, 0.1107, ],
                                    [0.0560, -0.1105, 0.0932, -0.2463, -0.0581, -0.1598, 1.0000, -0.4617, 0.1872, ],
                                    [-0.1369, 0.0738, 0.0961, -0.0754, 0.3152, 0.4397, -0.4617, 1.0000, -0.0114, ],
                                    [0.0099, -0.1152, 0.4938, 0.0204, 0.3151, 0.1107, 0.1872, -0.0114, 1.0000, ], ]),
                         ])

    k_trans = np.matrix([[0.3700, 0.2200, 0.2200, 0.0000, 0.0000, 0.3700, 0.0000, 0.2300, 0.2200, 0.2200, 0.0000,
                          0.0000, 0.2300, 0.0000],
                         [0.0000, 0.0200, 0.0200, 0.0000, 0.0000, 0.0000, 0.0100, 0.0100, 0.0200, 0.0200, 0.0000,
                          0.0000, 0.0100, 0.0100, ],
                         [0.0000, 0.3600, 0.3600, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.3600, 0.3600, 0.0000,
                          0.0000, 0.0000, 0.0000, ],
                         [0.0100, 0.0000, 0.0000, 0.0000, 0.0000, 0.0100, 0.0000, 0.1300, 0.0000, 0.0000, 0.0000,
                          0.0000, 0.1300, 0.0000, ],
                         [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0200, 0.0000, 0.0000, 0.0000,
                          0.0000, 0.0200, 0.0000, ],
                         [0.0000, 0.0200, 0.0200, 0.0200, 0.0200, 0.0000, 0.0000, 0.0000, 0.0200, 0.0200, 0.0200,
                          0.0200, 0.0000, 0.0000, ],
                         [0.0100, 0.3600, 0.3600, 0.0000, 0.0000, 0.0100, 0.0000, 0.0000, 0.3600, 0.3600, 0.0000,
                          0.0000, 0.0000, 0.0000, ],
                         [0.0000, 0.0000, 0.0000, 0.1200, 0.1200, 0.0000, 0.2600, 0.0000, 0.0000, 0.0000, 0.1200,
                          0.1200, 0.0000, 0.2600, ],
                         [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
                          0.0000, 0.0000, 0.0000, ], ])

    N_sig = np.zeros((10, NTypesN))
    N_min = np.zeros((12, NTypesN))
    N_max = np.zeros((12, NTypesN))

    N_sig[1, :] = [0.4296, 0.0754, 0.0754, 0.3283, 0.3283, 0.4296, 0.5029,
                   0.1472, 0.0754, 0.0754, 0.3283, 0.3283, 0.1472, 0.5029];
    N_sig[2, :] = [0.3558, 0.0046, 0.0046, 0.1844, 0.1844, 0.3558, 0.0022,
                   0.0030, 0.0046, 0.0046, 0.1844, 0.1844, 0.0030, 0.0022];
    N_sig[3, :] = [0.3644, 0.3813, 0.3813, 0.3630, 0.3630, 0.3644, 0.3359,
                   0.2846, 0.3813, 0.3813, 0.3630, 0.3630, 0.2846, 0.3359];
    N_sig[4, :] = [0.0048, 0.7107, 0.7107, 0.3568, 0.3568, 0.0048, 0.7395,
                   0.0554, 0.7107, 0.7107, 0.3568, 0.3568, 0.0554, 0.7395];
    N_sig[5, :] = [0.5259, 0.5033, 0.5033, 0.4372, 0.4372, 0.5259, 0.3035,
                   0.0062, 0.5033, 0.5033, 0.4372, 0.4372, 0.0062, 0.3035];
    N_sig[6, :] = [0.4947, 0.0052, 0.0052, 0.0170, 0.0170, 0.4947, 0.3186,
                   0.6356, 0.0052, 0.0052, 0.0170, 0.0170, 0.6356, 0.3186];
    N_sig[7, :] = [0.0113, 1.9269, 1.9269, 1.4550, 1.4550, 0.0113, 1.0353,
                   1.3712, 1.9269, 1.9269, 1.4550, 1.4550, 1.3712, 1.0353];
    N_sig[8, :] = [0.6104, 0.4817, 0.4817, 0.1504, 0.1504, 0.6104, 0.1813,
                   0.3497, 0.4817, 0.4817, 0.1504, 0.1504, 0.3497, 0.1813];
    N_sig[9, :] = [0.4608, 0.4385, 0.4385, 0.4311, 0.4311, 0.4608, 0.3632,
                   0.2857, 0.4385, 0.4385, 0.4311, 0.4311, 0.2857, 0.3632];

    N_sig = N_sig * param_std_scale

    N_min[1, :] = [61.4187, 42.1156, 42.1156, 51.8447, 51.8447, 61.4187, 32.3194,
                   110.7272, 42.1156, 42.1156, 51.8447, 51.8447, 110.7272, 32.3194, ];
    N_min[2, :] = [3.2940, 3.6802, 3.6802, 2.9852, 2.9852, 3.2940, 2.1462,
                   3.4510, 3.6802, 3.6802, 2.9852, 2.9852, 3.4510, 2.1462, ];
    N_min[3, :] = [-104.9627, -96.9345, -96.9345, -98.8335, -98.8335, -104.9627, -102.3895,
                   -101.5624, -96.9345, -96.9345, -98.8335, -98.8335, -101.5624, -102.3895, ];
    N_min[4, :] = [10.5568, 2.1840, 2.1840, 11.0503, 11.0503, 10.5568, 1.8285,
                   12.7969, 2.1840, 2.1840, 11.0503, 11.0503, 12.7969, 1.8285, ];
    N_min[5, :] = [-62.5083, -60.6745, -60.6745, -65.4193, -65.4193, -62.5083, -42.8895,
                   -66.1510, -60.6745, -60.6745, -65.4193, -65.4193, -66.1510, -42.8895, ];
    N_min[6, :] = [54.0018, 10.2826, 10.2826, 12.2898, 12.2898, 54.0018, 20.0311,
                   33.1367, 10.2826, 10.2826, 12.2898, 12.2898, 33.1367, 20.0311, ];
    N_min[7, :] = [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
                   0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, ];
    N_min[8, :] = [1.2406, 1.0000, 1.0000, 1.0000, 1.0000, 1.2406, 1.0000,
                   1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, ];
    N_min[9, :] = [-219.2039, -128.4559, -128.4559, -271.9846, -271.9846, -219.2039, -105.1880,
                   -124.5158, -128.4559, -128.4559, -271.9846, -271.9846, -124.5158, -105.1880, ];
    N_min[10, :] = [-63.2375, -85.2096, -85.2096, -70.3537, -70.3537, -63.2375, -53.3897,
                    -69.5922, -85.2096, -85.2096, -70.3537, -70.3537, -69.5922, -53.3897, ];
    N_min[11, :] = [10.3876, 7.3511, 7.3511, 9.2264, 9.2264, 10.3876, 5.8527,
                    16.7015, 7.3511, 7.3511, 9.2264, 9.2264, 16.7015, 5.8527, ];

    N_max[1, :] = [337.9765, 94.6939, 94.6939, 126.2367, 126.2367, 337.9765, 201.3221,
                   617.2776, 94.6939, 94.6939, 126.2367, 126.2367, 617.2776, 201.3221, ];
    N_max[2, :] = [10.8106, 8.6130, 8.6130, 5.6192, 5.6192, 10.8106, 5.3460,
                   15.6329, 8.6130, 8.6130, 5.6192, 5.6192, 15.6329, 5.3460, ];
    N_max[3, :] = [-76.8526, -71.7548, -71.7548, -75.7868, -75.7868, -76.8526, -59.6898,
                   -66.4770, -71.7548, -71.7548, -75.7868, -75.7868, -66.4770, -59.6898, ];
    N_max[4, :] = [45.3814, 40.4333, 40.4333, 31.3533, 31.3533, 45.3814, 47.6214,
                   43.5882, 40.4333, 40.4333, 31.3533, 31.3533, 43.5882, 47.6214, ];
    N_max[5, :] = [-30.0577, -36.5929, -36.5929, -45.6445, -45.6445, -30.0577, -30.7977,
                   -25.2891, -36.5929, -36.5929, -45.6445, -45.6445, -25.2891, -30.7977, ];
    N_max[6, :] = [232.8699, 21.9964, 21.9964, 120.5043, 120.5043, 232.8699, 102.4180,
                   909.5520, 21.9964, 21.9964, 120.5043, 120.5043, 909.5520, 102.4180, ];
    N_max[7, :] = [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
                   0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, ];
    N_max[8, :] = [40.2930, 196.7634, 196.7634, 71.0958, 71.0958, 40.2930, 54.2781,
                   325.7906, 196.7634, 196.7634, 71.0958, 71.0958, 325.7906, 54.2781, ];
    N_max[9, :] = [-45.0393, -56.5047, -56.5047, -56.8682, -56.8682, -45.0393, -35.7409,
                   -35.1145, -56.5047, -56.5047, -56.8682, -56.8682, -35.1145, -35.7409, ];
    N_max[10, :] = [-36.8701, -39.1085, -39.1085, -49.0974, -49.0974, -36.8701, -20.6720,
                    -27.8669, -39.1085, -39.1085, -49.0974, -49.0974, -27.8669, -20.6720, ];
    N_max[11, :] = [42.7304, 15.9128, 15.9128, 25.9839, 25.9839, 42.7304, 48.7992,
                    67.7062, 15.9128, 15.9128, 25.9839, 25.9839, 67.7062, 48.7992, ];

    p_fail = 0.3

    STSP_E1 = np.asarray([[0.28, 194, 507],
                          [0.02, 18, 37]])
    STSP_E2 = np.asarray([[0.25, 671, 17],
                          [0.02, 17, 5]])
    STSP_E3 = np.asarray([[0.29, 329, 326],
                          [0.03, 53, 66]])

    STSP_I1 = np.asarray([[0.16, 45, 376],
                          [0.10, 21, 253]])
    STSP_I2 = np.asarray([[0.25, 706, 21],
                          [0.13, 405, 9]])
    STSP_I3 = np.asarray([[0.32, 144, 62],
                          [0.14, 80, 31]])

    STSP_setup = {'E1': STSP_E1,
                  'E2': STSP_E2,
                  'E3': STSP_E3,
                  'I1': STSP_I1,
                  'I2': STSP_I2,
                  'I3': STSP_I3,
                  }

    get_SynType = {1: [1, 3],
                   2: [2, ]}

    get_STSP_prob = {1: [1, ],
                     2: [0.45, 0.38, 0.17],
                     3: [0.25, 0.50, 0.25],
                     4: [0.29, 0.58, 0.13],
                     0: [],
                     }

    get_STSP_types = {1: ['E1', ],
                      2: ['E2', ],
                      3: ['E1', 'E2', 'E3'],
                      11: ['I2', ],
                      12: ['I1', 'I2', 'I3'],
                      0: [],
                      }

    gmax_scale_EE = gmax_scale[0]
    gmax_scale_IE = gmax_scale[1]
    gmax_scale_EI = gmax_scale[2]
    gmax_scale_II = gmax_scale[3]

    ConParCont = [[[] for j in range(14)] for i in range(14)]

    Synpfail = np.zeros((14, 14))
    Synpfail[:, :] = p_fail

    Syndelay = np.zeros((14, 14))
    SynTypes = np.zeros((14, 14))
    Syngmax = np.zeros((14, 14))
    Syngmaxnonscaled = np.zeros((14, 14))

    SynTypes[:, 0] = 1  # 1: excitatory; 2: inhibitory
    SynTypes[:, 7] = 1

    SynTypes[:, 1:7] = 2
    SynTypes[:, 8:14] = 2

    STypPar = np.zeros((8, 3))
    STypPar[0, :] = [1, 1, 1.09]
    STypPar[1, :] = [1.4, 3.0, 4.3]
    STypPar[2, :] = [10, 40, 75]
    STypPar[3, :] = [0, -70, 0]
    STypPar[4, :] = [0, 0, 1]
    STypPar[5, :] = [0, 0, 0.33]
    STypPar[6, :] = [0, 0, 0.0625]
    STypPar[7, :] = [0, 0, 0]

    Syngmaxnonscaled[0, 0:14] = [0.8405, 2.2615, 2.2615, 0.18, 0.18, 2.2615, 1.8218,
                                 0.8378, 0.2497, 0.2497, 0.0556, 0.0556, 0.2497, 0.2285,
                                 ]

    Syngmaxnonscaled[7, 0:14] = [0.9533, 1.0503, 1.0503, 0.0836, 0.0836, 1.0503, 0.8461,
                                 0.8818, 1.7644, 1.7644, 0.3932, 0.3932, 1.7644, 1.6146,
                                 ]

    Syngmaxnonscaled[1:7, 0] = [1.3403, 1.3403, 0.4710, 0.4710, 1.3403, 0.2500]
    Syngmaxnonscaled[8:14, 0] = [1.5201, 1.5201, 0.5342, 0.5342, 1.5201, 0.2835]

    Syngmaxnonscaled[1:7, 7] = [0.7738, 0.7738, 0.2719, 0.2719, 0.7738, 0.1443]
    Syngmaxnonscaled[8:14, 7] = [1.7431, 1.7431, 0.88, 0.88, 1.7431, 0.28]

    Syngmaxnonscaled[1:7, 1:7] = 1.35
    Syngmaxnonscaled[8:14, 8:14] = 1.35

    for i in [0, 7]:
        for j in [0, 7]:
            Syngmax[i, j] = get_gmax(Syngmaxnonscaled[i, j], i, j) * gmax_scale_EE

    for i in [1, 2, 3, 4, 5, 6,
              8, 9, 10, 11, 12, 13]:
        for j in [1, 2, 3, 4, 5, 6,
                  8, 9, 10, 11, 12, 13]:
            Syngmax[i, j] = get_gmax(Syngmaxnonscaled[i, j], i, j) * gmax_scale_II

    for i in [0, 7]:
        for j in [1, 2, 3, 4, 5, 6,
                  8, 9, 10, 11, 12, 13]:
            Syngmax[i, j] = get_gmax(Syngmaxnonscaled[i, j], i, j) * gmax_scale_IE

    for i in [1, 2, 3, 4, 5, 6,
              8, 9, 10, 11, 12, 13]:
        for j in [0, 7]:
            Syngmax[i, j] = get_gmax(Syngmaxnonscaled[i, j], i, j) * gmax_scale_EI

    Syndelay[0, 0] = 1.5465
    Syndelay[0, 7] = 2.7533
    Syndelay[7, 0] = 1.9085
    Syndelay[7, 7] = 1.5667

    Syndelay[0, 1:7] = 1.2491
    Syndelay[0, 8:14] = 1.4411
    Syndelay[7, 1:7] = 1.5415
    Syndelay[7, 8:14] = 0.82

    Syndelay[1:7, 0] = 0.9581
    Syndelay[1:7, 7] = 1.0544
    Syndelay[8:14, 0] = 1.1825
    Syndelay[8:14, 7] = 0.6
    Syndelay[1:7, 1:7] = 1.1
    Syndelay[8:14, 8:14] = 1.1

    ConParSTSP = [[[] for j in range(16)] for i in range(14)]

    STSP_prob = np.zeros((14, 14))
    STSP_types = np.zeros((14, 14))

    STSP_prob[0, 0] = 2
    STSP_prob[0, 7] = 2
    STSP_prob[7, 0] = 2
    STSP_prob[7, 7] = 2

    STSP_prob[1:7, 0] = 1
    STSP_prob[1:7, 7] = 1
    STSP_prob[8:14, 0] = 1
    STSP_prob[8:14, 7] = 1

    STSP_prob[0, 1] = 3
    STSP_prob[0, 8] = 3
    STSP_prob[7, 1] = 3
    STSP_prob[7, 8] = 3

    STSP_prob[0, 2:7] = 1
    STSP_prob[0, 9:14] = 1
    STSP_prob[7, 2:7] = 1
    STSP_prob[7, 9:14] = 1

    STSP_prob[1:7, 1:7] = 4
    STSP_prob[8:14, 8:14] = 4

    STSP_types[0, 0] = 3
    STSP_types[0, 7] = 3
    STSP_types[7, 0] = 3
    STSP_types[7, 7] = 3

    STSP_types[1, 0] = 1
    STSP_types[1, 7] = 1
    STSP_types[8, 0] = 1
    STSP_types[8, 7] = 1

    STSP_types[2:4, 0] = 2
    STSP_types[2:4, 7] = 2
    STSP_types[9:11, 0] = 2
    STSP_types[9:11, 7] = 2

    STSP_types[4, 0] = 1
    STSP_types[4, 7] = 1
    STSP_types[11, 0] = 1
    STSP_types[11, 7] = 1

    STSP_types[5, 0] = 2
    STSP_types[5, 7] = 2
    STSP_types[12, 0] = 2
    STSP_types[12, 7] = 2

    STSP_types[6, 0] = 1
    STSP_types[6, 7] = 1
    STSP_types[13, 0] = 1
    STSP_types[13, 7] = 1

    STSP_types[0, 1] = 12
    STSP_types[0, 8] = 12
    STSP_types[7, 1] = 12
    STSP_types[7, 8] = 12

    STSP_types[0, 2:7] = 11
    STSP_types[0, 9:14] = 11
    STSP_types[7, 2:7] = 11
    STSP_types[7, 9:14] = 11

    STSP_types[1:7, 1:7] = 12
    STSP_types[8:14, 8:14] = 12

    pCon = np.zeros((14, 14))

    pCon[0, 0] = pCon_scale[0] * 0.1393
    pCon[0, 7] = pCon_scale[0] * 0.0449
    pCon[7, 0] = pCon_scale[0] * 0.2333
    pCon[7, 7] = pCon_scale[0] * 0.0806

    pCon[1:3, 0] = pCon_scale[1] * 0.3247
    pCon[1:3, 7] = pCon_scale[1] * 0.1875
    pCon[8:10, 0] = pCon_scale[1] * 0.0870
    pCon[8:10, 7] = pCon_scale[1] * 0.3331
    pCon[3:5, 0] = pCon_scale[1] * 0.1594
    pCon[3:5, 7] = pCon_scale[1] * 0.0920
    pCon[10:12, 0] = pCon_scale[1] * 0.0800
    pCon[10:12, 7] = pCon_scale[1] * 0.0800
    pCon[5, 0] = pCon_scale[1] * 0.3247
    pCon[5, 7] = pCon_scale[1] * 0.1875
    pCon[12, 0] = pCon_scale[1] * 0.0870
    pCon[12, 7] = pCon_scale[1] * 0.3331
    pCon[6, 0] = pCon_scale[1] * 0.2900
    pCon[6, 7] = pCon_scale[1] * 0.1674
    pCon[13, 0] = pCon_scale[1] * 0.1500
    pCon[13, 7] = pCon_scale[1] * 0.3619

    pCon[0, 1:3] = pCon_scale[2] * 0.4586
    pCon[0, 8:10] = pCon_scale[2] * 0.0991
    pCon[7, 1:3] = pCon_scale[2] * 0.2130
    pCon[7, 8:10] = pCon_scale[2] * 0.7006
    pCon[0, 3:5] = pCon_scale[2] * 0.4164
    pCon[0, 10:12] = pCon_scale[2] * 0.0321
    pCon[7, 3:5] = pCon_scale[2] * 0.1934
    pCon[7, 10:12] = pCon_scale[2] * 0.2271
    pCon[0, 5] = pCon_scale[2] * 0.4586
    pCon[0, 12] = pCon_scale[2] * 0.0991
    pCon[7, 5] = pCon_scale[2] * 0.2130
    pCon[7, 12] = pCon_scale[2] * 0.7006
    pCon[0, 6] = pCon_scale[2] * 0.6765
    pCon[0, 13] = pCon_scale[2] * 0.1287
    pCon[7, 6] = pCon_scale[2] * 0.3142
    pCon[7, 13] = pCon_scale[2] * 0.9096

    pCon[1:7, 1:7] = pCon_scale[3] * 0.25
    pCon[8:14, 8:14] = pCon_scale[3] * 0.60

    cluster_flag = np.zeros((14, 14))
    cluster_flag[0, 0] = 1
    cluster_flag[7, 7] = 1

    S_sig = np.zeros((14, 14, 2))
    S_max = np.zeros((14, 14, 2))
    S_min = np.zeros((14, 14, 2))

    S_sig[0, 0, 0] = 0.4695
    S_sig[0, 7, 0] = 0.1375
    S_sig[7, 0, 0] = 0.3530
    S_sig[7, 7, 0] = 0.9653

    S_sig[1:3, 0, 0] = 1.0855
    S_sig[1:3, 7, 0] = 0.6267
    S_sig[8:10, 0, 0] = 0.8588
    S_sig[8:10, 7, 0] = 1.1194

    S_sig[3:5, 0, 0] = 0.1999
    S_sig[3:5, 7, 0] = 0.1154
    S_sig[10:12, 0, 0] = 0.1581
    S_sig[10:12, 7, 0] = 0.7033

    S_sig[5, 0, 0] = 1.0855
    S_sig[5, 7, 0] = 0.6267
    S_sig[12, 0, 0] = 0.8588
    S_sig[12, 7, 0] = 1.1194

    S_sig[6, 0, 0] = 0.2000
    S_sig[6, 7, 0] = 0.1155
    S_sig[13, 0, 0] = 0.1582
    S_sig[13, 7, 0] = 0.3000

    S_sig[0, 1:3, 0] = 1.9462
    S_sig[0, 8:10, 0] = 0.0362
    S_sig[7, 1:3, 0] = 0.9038
    S_sig[7, 8:10, 0] = 0.2557

    S_sig[0, 3:5, 0] = 0.6634
    S_sig[0, 10:12, 0] = 0.0093
    S_sig[7, 3:5, 0] = 0.3081
    S_sig[7, 10:12, 0] = 0.0655

    S_sig[0, 5, 0] = 1.9462
    S_sig[0, 12, 0] = 0.0362
    S_sig[7, 5, 0] = 0.9038
    S_sig[7, 12, 0] = 0.2557

    S_sig[0, 6, 0] = 3.6531
    S_sig[0, 13, 0] = 0.1828
    S_sig[7, 6, 0] = 1.6966
    S_sig[7, 13, 0] = 1.2919

    S_sig[1:7, 1:7, 0] = 0.35
    S_sig[8:14, 8:14, 0] = 0.35

    S_sig[0, 0, 1] = 0.3095
    S_sig[0, 7, 1] = 0.1825
    S_sig[7, 0, 1] = 0.1651
    S_sig[7, 7, 1] = 0.4350

    S_sig[1:7, 0, 1] = 0.2489
    S_sig[1:7, 7, 1] = 0.0839
    S_sig[8:14, 0, 1] = 0.1327
    S_sig[8:14, 7, 1] = 0.2000

    S_sig[0, 1:7, 1] = 0.1786
    S_sig[0, 8:14, 1] = 0.0394
    S_sig[7, 1:7, 1] = 0.0940
    S_sig[7, 8:14, 1] = 0.0940

    S_sig[1:7, 1:7, 1] = 0.4
    S_sig[8:14, 8:14, 1] = 0.4

    S_max[:, :, 0] = 100
    S_max[:, :, 1] = 2

    pConStripes = [[0, 0], [7, 12], [7, 13]]

    coefStripes = [[0.909, 1.4587],
                   [0.909, 1.0375],
                   [0.909, 1.0375],
                   ]

    interStripes = [[-4, -2, 2, 4],
                    [-1, 1],
                    [-1, 1],
                    ]

    ConParStripes = pConStripes, coefStripes, interStripes

    return (NTypes,
            CellPar, V0Par, k_trans, ParCov, N_sig, N_max, N_min,
            SynTypes, Syngmax, Syndelay, Synpfail,
            STSP_prob, STSP_types, pCon, cluster_flag,
            S_sig, S_max, S_min, p_fail,
            STSP_E1, STSP_E2, STSP_E3,
            STSP_I1, STSP_I2, STSP_I3,
            STSP_setup,
            get_SynType, get_STSP_prob, get_STSP_types,
            STypPar,
            ConParStripes,
            )


def get_gmax(PSP, i, j):
    par_E = [1.0569, 0.5875, 0.6587, 0.7567, 0.6728, 0.9899, 0.6294, 1.6596, 0.5941, 0.6661, 0.7647, 0.6799, 1.5818,
             0.6360]
    par_I = [2.3859, 1.6277, 1.6277, 1.6671, 1.6671, 2.3142, 1.4363, 3.5816, 1.6277, 1.6277, 1.6671, 1.6671, 3.4016,
             1.4363]

    if j in [0, 7]:
        gmax = PSP * par_E[i]
    else:
        gmax = PSP * par_I[i]

    return gmax